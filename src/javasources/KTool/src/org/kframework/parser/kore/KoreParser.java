/* Generated By:JavaCC: Do not edit this line. KoreParser.java */
package org.kframework.parser.kore;

import org.kframework.kil.Term;
import org.kframework.kil.ASTNode;
import org.kframework.kil.IntBuiltin;
import org.kframework.kil.BoolBuiltin;
import org.kframework.kil.StringBuiltin;
import org.kframework.kil.KLabelConstant;
import org.kframework.kil.KLabel;
import org.kframework.kil.KList;
import org.kframework.kil.KSequence;
import org.kframework.kil.KApp;
import org.kframework.kil.KInjectedLabel;
import org.kframework.kil.Variable;
import org.kframework.kil.Bag;
import org.kframework.kil.Rewrite;
import org.kframework.kil.Cell;
import org.kframework.kil.Sentence;
import org.kframework.kil.Freezer;
import java.util.ArrayList;
import java.util.HashMap;
import org.kframework.kil.loader.Context;
import java.io.StringReader;

import org.kframework.utils.errorsystem.KException.ExceptionType;
import org.kframework.utils.errorsystem.KException.KExceptionGroup;
import org.kframework.utils.errorsystem.KException;
import org.kframework.utils.general.GlobalSettings;


public class KoreParser implements KoreParserConstants {
  private String filename;

  /** Parses a given string that was read from 'stringSentence'. */
  public static Sentence parse(String filename, String string, Context context) {
    KoreParser parser = new KoreParser(new StringReader(string));
    try {
      return parser.parseTopLevel(context);
    } catch (ParseException e) {
      // TODO: report location
      GlobalSettings.kem.register(new KException(
        ExceptionType.ERROR, KExceptionGroup.PARSER, e.toString(), filename, null));
      return null;
    } catch (TokenMgrError e) {
      GlobalSettings.kem.register(new KException(
        ExceptionType.ERROR, KExceptionGroup.PARSER, e.toString(), filename, null));
      return null;
    }
  }

  final public Sentence parseTopLevel(Context context) throws ParseException {
                                           Term col;Term req=null;Term ens=null;
    col = parseCollection(context);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
      req = parseKApp(context);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
      ens = parseKApp(context);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(0);
 Sentence result = new Sentence(); result.setBody(col);
        if (req!=null)
                result.setRequires(req);
        if (ens!=null)
                result.setEnsures(ens);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Term parseCollection(Context context) throws ParseException {
                                         ArrayList<Term> result = new ArrayList<Term>();Term a;
    label_1:
    while (true) {
      a = parseCellItem(context);
                             result.add(a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case STRING:
      case 8:
      case 9:
      case 10:
      case 12:
      case 15:
      case 16:
      case 18:
      case LCELLPR:
      case LCURLY:
      case LSQUARE:
      case SORT_ID:
      case SORTKINJECT:
      case LABELCONSTANT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
  if(result.size()==1)
    {if (true) return result.get(0);}
  else
    {if (true) return new Bag(result);}
    throw new Error("Missing return statement in function");
  }

  final public Term parseCellItem(Context context) throws ParseException {
                                       Term left;Term right;;Token label;Token endLabel;Term cellContents;
                boolean leftEclipse;boolean rightEclipse;HashMap<String,String> attributes=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case STRING:
    case 8:
    case 9:
    case 10:
    case 12:
    case 15:
    case 16:
    case 18:
    case LCURLY:
    case LSQUARE:
    case SORT_ID:
    case SORTKINJECT:
    case LABELCONSTANT:
      left = parseKList(context);
                              {if (true) return left;}
      break;
    case LCELLPR:
      jj_consume_token(LCELLPR);
      label = jj_consume_token(SORT_ID);
      attributes = parseAttributes();
      leftEclipse = parseLeftEclipse();
      cellContents = parseCollection(context);
      rightEclipse = parseRightEclipse();
      endLabel = jj_consume_token(SORT_ID);
      jj_consume_token(RCELLPR);
          if(label.image.equals(endLabel.image))
         { if(leftEclipse)
        { if (rightEclipse)
                {if (true) return new Cell(label.image,cellContents,attributes,"both");}
          else
                {if (true) return new Cell(label.image,cellContents,attributes,"left");}
        } else if (rightEclipse)
                {if (true) return new Cell(label.image,cellContents,attributes,"right");}
          else
                {if (true) return new Cell(label.image,cellContents,attributes,"none");}
        }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean parseLeftEclipse() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RCELLPR:
      jj_consume_token(RCELLPR);
 {if (true) return false;}
      break;
    case RCELLPRDOT:
      jj_consume_token(RCELLPRDOT);
 {if (true) return true;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean parseRightEclipse() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENDPR:
      jj_consume_token(LENDPR);
 {if (true) return false;}
      break;
    case LENDPRDOT:
      jj_consume_token(LENDPRDOT);
 {if (true) return true;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public HashMap<String,String> parseAttributes() throws ParseException {
         HashMap<String,String > temp = new HashMap<String,String >();Token a;Token b;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 19:
      case 20:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        a = jj_consume_token(17);
        jj_consume_token(EQUAL);
        b = jj_consume_token(STRING);
        break;
      case 19:
        a = jj_consume_token(19);
        jj_consume_token(EQUAL);
        b = jj_consume_token(STRING);
        break;
      case 20:
        a = jj_consume_token(20);
        jj_consume_token(EQUAL);
        b = jj_consume_token(STRING);
          if(a.image.equals("color"))
                temp.put("color",b.image);
          else if(a.image.equals("multiplicity"))
                temp.put("multiplicity",b.image);
                else if(a.image.equals("stream"))
                temp.put("stream",b.image);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
               {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public Term parseKList(Context context) throws ParseException {
                                    ArrayList<Term> temp = new ArrayList<Term>();Term a;Term e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
 {if (true) return KList.EMPTY;}
      break;
    case NUM:
    case STRING:
    case 8:
    case 9:
    case 10:
    case 12:
    case 16:
    case 18:
    case LCURLY:
    case LSQUARE:
    case SORT_ID:
    case SORTKINJECT:
    case LABELCONSTANT:
      a = parsePreKSeq(context);
 temp.add(a);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(13);
        e = parsePreKSeq(context);
 temp.add(e);
      }
  if(temp.size()==1)
        {if (true) return temp.get(0);}
  else
    {if (true) return new KList(temp);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term parsePreKSeq(Context context) throws ParseException {
                                      ArrayList<Term> temp = new ArrayList<Term>();Term a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQUARE:
      jj_consume_token(LSQUARE);
      a = parseKList(context);
      jj_consume_token(RSQUARE);
 {if (true) return a;}
      break;
    case NUM:
    case STRING:
    case 8:
    case 9:
    case 10:
    case 12:
    case 16:
    case 18:
    case LCURLY:
    case SORT_ID:
    case SORTKINJECT:
    case LABELCONSTANT:
      a = parseKSeq(context);
                        {if (true) return a;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term parseKSeq(Context context) throws ParseException {
                                  ArrayList<Term> temp = new ArrayList<Term>();Term a;Term e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
        {if (true) return KSequence.EMPTY;}
      break;
    case NUM:
    case STRING:
    case 8:
    case 9:
    case 10:
    case 16:
    case 18:
    case LCURLY:
    case SORT_ID:
    case SORTKINJECT:
    case LABELCONSTANT:
      a = parsePreKApp(context);
 temp.add(a);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(14);
        e = parsePreKApp(context);
 temp.add(e);
      }
 if (temp.size()==1)
        {if (true) return temp.get(0);}
 else
  {if (true) return new KSequence(temp);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term parsePreKApp(Context context) throws ParseException {
                                      Term left; Term right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLY:
      jj_consume_token(LCURLY);
      left = parseCollection(context);
      jj_consume_token(REWRITE);
      right = parseCollection(context);
      jj_consume_token(RCURLY);
 {if (true) return  new Rewrite(left, right, context);}
      break;
    case NUM:
    case STRING:
    case 8:
    case 9:
    case 10:
    case 16:
    case 18:
    case SORT_ID:
    case SORTKINJECT:
    case LABELCONSTANT:
      left = parseKApp(context);
 {if (true) return left;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term parseKApp(Context context) throws ParseException {
                                 Term a; Term b; Term c=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case STRING:
    case 8:
    case 9:
    case 10:
    case 16:
    case SORT_ID:
    case SORTKINJECT:
    case LABELCONSTANT:
      a = parseKInject(context);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPR:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        jj_consume_token(LPR);
        b = parseKList(context);
        jj_consume_token(RPR);
                                        c=new KApp(a,b);a=c;
      }
   if (c == null)
     {if (true) return a;}
   else
    {if (true) return c;}
      break;
    case 18:
      jj_consume_token(18);
      a = parseKApp(context);
      jj_consume_token(LCURLY);
      jj_consume_token(15);
      jj_consume_token(RCURLY);
                                                                   {if (true) return new Freezer(a);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term parseKInject(Context context) throws ParseException {
                                    Term a;Term b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case STRING:
    case 8:
    case 9:
    case 16:
    case SORT_ID:
    case LABELCONSTANT:
      a = parseLabel();
 {if (true) return a;}
      break;
    case SORTKINJECT:
      jj_consume_token(SORTKINJECT);
      jj_consume_token(LPR);
      a = parseCollection(context);
      jj_consume_token(RPR);
      jj_consume_token(LPR);
      b = parseKList(context);
      jj_consume_token(RPR);
 {if (true) return new KApp(a,b);}
      break;
    case 10:
      jj_consume_token(10);
      jj_consume_token(LPR);
      a = parseCollection(context);
      jj_consume_token(RPR);
      jj_consume_token(LPR);
      b = parseKList(context);
      jj_consume_token(RPR);
 {if (true) return new KApp(a,b);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term parseLabel() throws ParseException {
 Token n;Token m;Term a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      n = jj_consume_token(NUM);
                {if (true) return (KLabel)IntBuiltin.of(Integer.parseInt(n.image));}
      break;
    case STRING:
      n = jj_consume_token(STRING);
                  {if (true) return (KLabel)StringBuiltin.of(n.image);}
      break;
    case 8:
      jj_consume_token(8);
          {if (true) return (KLabel)BoolBuiltin.of("true");}
      break;
    case 16:
      jj_consume_token(16);
           {if (true) return Bag.EMPTY;}
      break;
    case 9:
      jj_consume_token(9);
           {if (true) return (KLabel)BoolBuiltin.of("false");}
      break;
    case LABELCONSTANT:
      n = jj_consume_token(LABELCONSTANT);
                        {if (true) return (KLabel) KLabelConstant.of(n.image);}
      break;
    case SORT_ID:
      if (jj_2_1(2)) {
        a = choiceOne();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SORT_ID:
          a = choiceTwo();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                    {if (true) return a;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term choiceOne() throws ParseException {
                    Token n; Token m;
    n = jj_consume_token(SORT_ID);
    jj_consume_token(11);
    m = jj_consume_token(SORT_ID);
                                       {if (true) return (Term)(new Variable(n.image,m.image));}
    throw new Error("Missing return statement in function");
  }

  final public Term choiceTwo() throws ParseException {
                    Token n;
    n = jj_consume_token(SORT_ID);
                {if (true) return (Term)KLabelConstant.of(n.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(SORT_ID)) return true;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public KoreParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x400000,0x20597a0,0x20597a0,0x14000000,0x28000000,0x1a0000,0x1a0000,0x2000,0x597a0,0x517a0,0x4000,0x517a0,0x507a0,0x40000000,0x507a0,0x107a0,0x0,0x103a0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x75,0x75,0x0,0x0,0x0,0x0,0x0,0x75,0x75,0x0,0x71,0x71,0x0,0x70,0x70,0x10,0x50,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public KoreParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public KoreParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KoreParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public KoreParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KoreParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public KoreParser(KoreParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(KoreParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
